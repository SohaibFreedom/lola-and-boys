{% assign variant = product.selected_or_first_available_variant %}
<script>
  const product2 = {{ product | json }};
  const variantsContainer = document.getElementById('variants-container');

  product2.variants.forEach(variant => {
      const variantDiv = document.createElement('div');

      variantDiv.textContent = variant.title;
      variantDiv.setAttribute('variant-id', variant.id);
      variantsContainer.appendChild(variantDiv);
  });
</script>
<script>
  $(document).ready(function() {
    // Select the button using its class
    var embroiderbutton = $('.embroider-button');
    var embroidercontimuebutton = $('.emb-variants-continue-btn');
    var cartButtonemb = $('.customize-cart-button');
    var embroidercontimuebackbutton = $('.emb_patches_back_btn');

    // Add a click event listener to the button
   
     embroidercontimuebutton.on('click', function() {
    console.log('back color btn clicked');
       const productTags = {{ product.tags | json }};
       if (productTags.includes("no-back-image")) {
          $('.wordsletter_inputs_btn_wrapper').hide();
          $('.front_input_heading').hide();
          $('.FRarminput').hide();
          $('.front_input_heading').hide();
          $('.FLarminput').hide();
             // Show the sidebar by setting visibility to 'visible'
      $('#emb_variants-selected-sidebar').addClass('active');
        $('#emb_variants-selected-sidebar').css('flex-direction', 'column');
        
        // Handle visibility for smaller screens
        if (window.innerWidth < 769) {
            $('.emb-only-mobile-for-colors').css('display', 'block');
            $('.emb-only-mobile-for-styles').css('display', 'none');
        }

        // Show the continue button
        // $('.variants-continue-btn-invisible').css('display', 'block');
        // Hide the embroider continue button
        embroidercontimuebutton.css('visibility', 'hidden');
        }
       else{
           // Check if any .size_variants_circle has the .size_variants_active class
    if ($('.size_variants_circle').hasClass('size_variants_active')) {
        // Show the sidebar by setting visibility to 'visible'
       $('#emb_variants-selected-sidebar').addClass('active');
        $('#emb_variants-selected-sidebar').css('flex-direction', 'column');
        
        // Handle visibility for smaller screens
        if (window.innerWidth < 769) {
            $('.emb-only-mobile-for-colors').css('display', 'block');
            $('.emb-only-mobile-for-styles').css('display', 'none');
        }

        // Show the continue button
        $('.variants-continue-btn-invisible').css('display', 'block');
        $('.scrolbar__color_size_wrap').css('display', 'none');

        // Hide the embroider continue button
        
         $('#emb-patches-customization-form-btn').css('display', 'flex');
            $('.emb-variants-continue-btn').css('display', 'none');
            $('.summary-add-to-bag-emb').css('display', 'block');
            $('.summary-continnue-emb').css('display', 'none');
            
const $targets = $('.embroidery-summary-wrapper, .patches-customization-wrapper, .variants-selected-sidebar');

  if ($targets.is('.embroidery-summary-wrapper-open, .overlay-active')) {
    $targets.removeClass('embroidery-summary-wrapper-open overlay-active');
  }
  
            
    } 
    else {
        // If no .size_variants_circle has .size_variants_active, show the error div
        $('.size_variants_errors').css('display', 'block');
    }  
       }

});

     embroidercontimuebackbutton.on('click', function() {
        // Show the sidebar by setting visibility to 'visible'
        $('.scrolbar__color_size_wrap').css('display', 'block');
     $('#emb_variants-selected-sidebar').removeClass('active')
       $('.size_variants_section').css('visibility', 'visible');
       $('#emb_size_color_selector_sidebar').removeClass('variants-continue-btn-invisible');
         $('.emb-only-mobile-for-styles').css('display', 'none');
            if (window.innerWidth < 769) {
        // Execute this code if the screen width is smaller than 69px
        $('.emb-only-mobile-for-colors').css('display', 'none');
    }
        if (window.innerWidth < 769){
          $('.emb-only-mobile-for-styles').css('display', 'block');
       } 
       $('#emb-patches-customization-form-btn').css('display', 'none');
            $('.emb-variants-continue-btn').css('display', 'block');
        $('.summary-add-to-bag-emb').css('display', 'none');
            $('.summary-continnue-emb').css('display', 'block');
    });
    // Flag to indicate whether customization mode is active
    var isCustomizationActive = false;

    // Callback function to execute when mutations are observed
    var callback = function(mutationsList, observer) {
        for (var mutation of mutationsList) {
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(function(node) {
                    if (node.classList && node.classList.contains('yotpo-banner-low')) {
                        if (isCustomizationActive) {
                            // Hide the element if customization is active
                            node.style.display = 'none';
                            console.log('.yotpo-banner-low is now hidden.');
                        }
                    }
                });
            } else if (mutation.type === 'attributes' && mutation.target.classList.contains('yotpo-banner-low')) {
                if (isCustomizationActive) {
                    // Hide the element if customization is active
                    mutation.target.style.display = 'none';
                    console.log('.yotpo-banner-low is now hidden (attribute change).');
                }
            }
        }
    };

    // Create an observer instance linked to the callback function
    var observer = new MutationObserver(callback);

    // Configuration of the observer:
    // We want to observe additions of nodes (childList) and attribute changes
    var config = { attributes: true, childList: true, subtree: true };

    // Start observing the document's body for configured mutations
    observer.observe(document.body, config);

    // Add a click event listener to the button
   embroiderbutton.click(function() {
        isCustomizationActive = true;
        console.log('embroider button clicked');

        // Hide the bannerLow if it already exists
        var bannerLow = document.querySelector('.yotpo-banner-low');
        if (bannerLow) {
            bannerLow.style.display = 'none';
        }

        // Select all elements with the hide-for-customization class and hide them
         $('.content-main').css('margin-top', '0px');
          $('.product-full').hide();
        $('.hide-for-customization').hide();
        $('.yotpo-widget-clear').hide();
        $('.yotpo-reviews-list').hide();
         $('#shopify-block-yotpo_product_reviews_ugc_reviews_MbrNNx').hide();
        $('#shopify-section-template--15691086168166__shop_with_us_4cNKDq').hide();

        $('.footer').hide();
        $('.annoucment-bar-top').hide();
        $('#header').hide();
        $('#some-id').hide();
        // $('.yotpo-banner-low').hide();

        // Show the product customization div
        $('.embroidery-customization').show();

        // Add classes to make other elements visible
        $('.announce-bar-slide-wrapper, .header-background--solid, .content').hide();
        $('.customize-cart-button').hide();

        // Add a class to cartButton to make it visible
        cartButtonemb.addClass('customize-cart-button-visible');
    });
  });
</script>
<script>
   // Make a request to your Remix app's API endpoint with the Shopify.shop parameter
   fetch(`https://lolaandtheboys.com/apps/data-pickup`)
     .then(response => {
       // Check if the response is successful
       if (!response.ok) {
         throw new Error('Network response was not ok');
       }

       // Parse the response as JSON
       return response.json();
     })
     .then(data => {
       // Log the data received from the API
       console.log('DATA', data);
       // const alphabets = data.alphabets;
       // const patches = data.patches;
       const imagesData = data.embImgData;
       const colorVariants = data.colorvariants;
         const sizeVariants = data.sizevariants;
       const fontVariants = data.fonts;
       const threadcolors = data.threadsColor;
        const parentDiv = document.querySelector('.all_emb_fonts');
       showcolorVariants();
      $(document).on('click', '.words-letter-show-plus-icons', function (e) {
  e.preventDefault();
  const $p = $('.emb-words-letter-font-wrapper');
  const $pc = $('.emb-monogram-font-wrapper');
  const open = $p.hasClass('is-open');
  if (!open) {
    const h = $p[0].scrollHeight;       // natural height
    $p.css('--target-h', h + 'px').addClass('is-open');
     $pc.css('--target-h', '0px').removeClass('is-open');
  } else {
    $p.css('--target-h', '0px').removeClass('is-open');
  }
});

      $(document).on('click', '.monogram-show-plus-icons', function (e) {
        e.preventDefault();
  displayMonogramsFonts(fontVariants);
  const $p = $('.emb-monogram-font-wrapper');
  const $pc = $('.emb-words-letter-font-wrapper');
  const open = $p.hasClass('is-open');
  if (!open) {
    const h = $p[0].scrollHeight;       // natural height
    $p.css('--target-h', h + 'px').addClass('is-open');
     $pc.css('--target-h', '0px').removeClass('is-open');
  } else {
    $p.css('--target-h', '0px').removeClass('is-open');
  }
});

       displayFonts(fontVariants);
           $('#emb_fonts_monogram_btn').click(function() {

    // Call the displayMonogramsFonts function with fontVariants as a parameter
    displayMonogramsFonts(fontVariants);
          if ($('#monogram_front_inputs_btn').hasClass('front_inputs_btn_active')) {
            
    // Show Front Area, Hide Back Area
    $('#emb-Front-Area').css({
      'visibility': 'visible',
      // 'top': '0px',
      // 'left': '0px'
    });
    $('#emb-Back-area').css('visibility', 'hidden');
    $('#emb-Front-Area').removeClass('image-hidden');        
  } else {
            
    // Show Back Area, Hide Front Area
    $('#emb-Back-area').css('visibility', 'visible');
    $('#emb-Front-Area').css('visibility', 'hidden');
    $('#emb-Back-area').removeClass('image-hidden');
  }
          $('.emb_fonts_words_btn_active').removeClass('emb_fonts_words_btn_active');

    // Add the class to the clicked button
    $(this).addClass('emb_fonts_words_btn_active');
         var inputValue = $('.Fmonograminput').val();
  $('.emb-font-type-area').text(inputValue);
         var inputValue = $('.Bmonograminput').val();
  $('.emb-back-type-area').text(inputValue);
    showmonogramfrontembinputs();
  });
      $('#emb_fonts_words_btn').click(function() {
                 if ($('#front_inputs_btn').hasClass('front_inputs_btn_active')) {
          
    // Show Front Area, Hide Back Area
    $('#emb-Front-Area').css('visibility', 'visible');
    $('#emb-Back-area').css('visibility', 'hidden');
    $('#emb-Front-Area').removeClass('image-hidden');
  } else {
           
    // Show Back Area, Hide Front Area
    $('#emb-Back-area').css('visibility', 'visible');
    $('#emb-Front-Area').css('visibility', 'hidden');
    $('#emb-Front-Area').removeClass('image-hidden');  
  }
              var inputValue = $('.Fchestinput').val();
  $('.emb-font-type-area').text(inputValue);
         var inputValue = $('.Bchestinput').val();
  $('.emb-back-type-area').text(inputValue);
    // Call the displayFonts function with fontVariants as a parameter
    displayFonts(fontVariants);

    // Remove the class from any other buttons or elements (if applicable)
    $('.emb_fonts_words_btn_active').removeClass('emb_fonts_words_btn_active');

    // Add the class to the clicked button
    $(this).addClass('emb_fonts_words_btn_active');
});
      $(document).ready(function() {
    // Add the .emb_fonts_words_btn_active class to the #emb_fonts_words_btn div on page load
    $('#emb_fonts_words_btn').addClass('emb_fonts_words_btn_active');
});

       const parentDivthreads = document.querySelector('.all_threads_colors');
      console.log(threadcolors)
     
       // console.log(sizeVariants); // This line will cause an error since sizeVariants is not defined
       // showcolorVariants();
       showFrontImage();
       showBackImage();
      

       function showFrontImage() {
    console.log('emb front area');
         
    const product = {{ product | json }};
         const productTags = {{ product.tags | json }};
    if (productTags.includes("no-back-image")) {
       
      $('.patches-customizations-btn-wrapper').css('visibility', 'hidden');
    }
    // Iterate over the variants to find the relevant image data
    let currentImageData = null;

    product.variants.some(variant => {
        console.log('Variant ID:', variant.id);
        console.log('Images Data:', imagesData);

        currentImageData = imagesData.find(item => item.FproductId.toString() === variant.id.toString());
        console.log('Found Image Data:', currentImageData);

        // Return true to stop the loop after finding the first match
        return currentImageData !== undefined;
    });

    console.log('Final currentImageData:', currentImageData);

    // Update the image source and CSS properties if data is found
    if (currentImageData) {
        // const img = document.getElementById("emb-Front-image");
        // img.src = currentImageData.FProductImg;

        // Update CSS properties of #embcenterBox
        const centerBox = document.getElementById("embcenterBox");
        centerBox.style.height = currentImageData.FHeight + '%';
        centerBox.style.width = currentImageData.FWidth + '%';
        centerBox.style.top = currentImageData.FTop + '%';
        centerBox.style.left = currentImageData.FLeft + '%';
        //arm emb area
        //right arm
        const frontRarmembcenterBox = document.getElementById("frontRarmembcenterBox");
        frontRarmembcenterBox.style.height = currentImageData.FRAHeight + '%';
        frontRarmembcenterBox.style.width = currentImageData.FRAWidth + '%';
        frontRarmembcenterBox.style.top = currentImageData.FRATop + '%';
        frontRarmembcenterBox.style.left = currentImageData.FRALeft + '%';
        const Rarmembarea = document.createElement('div');
        Rarmembarea.classList.add('Rarm-emb-font-type-area');
      
        frontRarmembcenterBox.appendChild(Rarmembarea);
        const FRarminputField = document.querySelector('.FRarminput');

      // Add an event listener for the input event to update the newDiv's content
      FRarminputField.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      Rarmembarea.textContent = FRarminputField.value;
     });
        //left  arm
        const frontLarmembcenterBox = document.getElementById("frontLarmembcenterBox");
        frontLarmembcenterBox.style.height = currentImageData.FLAHeight + '%';
        frontLarmembcenterBox.style.width = currentImageData.FLAWidth + '%';
        frontLarmembcenterBox.style.top = currentImageData.FLATop + '%';
        frontLarmembcenterBox.style.left = currentImageData.FLALeft + '%';

          const Larmembarea = document.createElement('div');
        Larmembarea.classList.add('Larm-emb-font-type-area');
        frontLarmembcenterBox.appendChild(Larmembarea);
        const FLarminputField = document.querySelector('.FLarminput');

      // Add an event listener for the input event to update the newDiv's content
      FLarminputField.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      Larmembarea.textContent = FLarminputField.value;
     });

        // Create a new child div with the class .emb-font-type-area
        const newDiv = document.createElement('div');
        newDiv.classList.add('emb-font-type-area');

        // Optionally, you can set some styles or text for the new div
        
        // newDiv.textContent = 'abc'; // or any other text you want

        // Append the new div to the centerBox
        centerBox.appendChild(newDiv);
        
        const inputField = document.querySelector('.Fchestinput');

      // Add an event listener for the input event to update the newDiv's content
      inputField.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      newDiv.textContent = inputField.value;
    {% comment %} if (inputField.value.length <= 5) {
  newDiv.style.setProperty('font-size', '15px', 'important');
} 
      else {
  if (window.innerWidth < 769) {
    newDiv.style.setProperty('font-size', '15px', 'important');
  } else if (window.innerWidth >= 1024 && window.innerWidth <= 1300) {
    newDiv.style.setProperty('font-size', '15px', 'important');
  } else {
     newDiv.style.fontSize = '15px';
  }
} {% endcomment %}
     });
         
      const Fmonograminput = document.querySelector('.Fmonograminput');

      // Add an event listener for the input event to update the newDiv's content
      Fmonograminput.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      newDiv.textContent = Fmonograminput.value;
     });
    }
         displayFonts(fontVariants);
}
function showthreadcolors(threadColors) {
    console.log('threadColors:', threadColors);
  
    // Clear previous colors (if any)
    $('#all_threads_colors').empty();

    threadColors.forEach(function(color, index) {
        // Create a new div for each color with custom data attributes for ColorTitle and ColorName
        var colorDiv = $('<div></div>')
            .css({
                'background-color': color.ColorName,  // Set background to ColorName
                'width': '60px',
                'height': '60px',
                'display': 'inline-block',
                'cursor': 'pointer',
                 'border-radius': '3px',
                'border': '2px solid transparent',  // Add transparent border
                'border-radius': '5px'
            })
            .attr('data-color-title', color.ColorTitle)  // Store ColorTitle in a custom attribute
            .attr('data-color-name', color.ColorName)  // Store ColorName in a custom attribute
            .on('click', function() {
                // Get values from data attributes
                var selectedColorTitle = $(this).attr('data-color-title');
                var selectedColorName = $(this).attr('data-color-name');
                
                // Remove 'selected-thread-color' class from all divs
                $('#all_threads_colors div').removeClass('selected-thread-color');
                
                // Add 'selected-thread-color' class to the clicked div
                $(this).addClass('selected-thread-color');
                const embFontcolorInput = $('#selective_font_color');
                if (embFontcolorInput.length) {
                embFontcolorInput.val(selectedColorTitle);
                console.log('Hidden input updated with font family:', selectedColorTitle);
              }

                // Update the #selected_color span and change the text color of .emb-font-type-area
                $('#selected_color').text(selectedColorTitle);  // Show the ColorTitle in span
                $('.emb-font-type-area').css('color', selectedColorName);  // Change text color in .emb-font-type-area
                $('.emb-back-type-area').css('color', selectedColorName);  // Change text color in .emb-font-type-area
            $('#frontLarmembcenterBox').css('color', selectedColorName);  // Change text color in .emb-font-type-area
            $('#frontRarmembcenterBox').css('color', selectedColorName);  // Change text color in .emb-font-type-area
            $('#brontLarmembcenterBox').css('color', selectedColorName);  // Change text color in .emb-font-type-area
            $('#brontRarmembcenterBox').css('color', selectedColorName);  // Change text color in .emb-font-type-area
            });

        // Append the new color div to #all_threads_colors
        $('#all_threads_colors').append(colorDiv);
        
        // Automatically handle the first color div
        if (index === 0) {
            // Add 'selected-thread-color' class to the first div
            colorDiv.addClass('selected-thread-color');
            
            // Use the data attributes to update the #selected_color span and text color
            var firstColorTitle = colorDiv.attr('data-color-title');
            var firstColorName = colorDiv.attr('data-color-name');
                     const embFontcolorInput = $('#selective_font_color');
                if (embFontcolorInput.length) {
                embFontcolorInput.val(firstColorTitle);
                console.log('Hidden input updated with font family:', firstColorTitle );
              }
            $('#selected_color').text(firstColorTitle);  // Show the ColorTitle in span
            $('.emb-font-type-area').css('color', firstColorName);  // Change text color in .emb-font-type-area
            $('.emb-back-type-area').css('color', firstColorName);  // Change text color in .emb-font-type-area
            $('#frontLarmembcenterBox').css('color', firstColorName);  // Change text color in .emb-font-type-area
            $('#frontRarmembcenterBox').css('color', firstColorName);  // Change text color in .emb-font-type-area
            $('#brontLarmembcenterBox').css('color', firstColorName);  // Change text color in .emb-font-type-area
            $('#brontRarmembcenterBox').css('color', firstColorName);  // Change text color in .emb-font-type-area
        }
    });
}

      function showBackImage() {
   // Get the variant ID
   const variantId = "{{variant.id}}"; // Replace "{{variant.id}}" with your actual variant ID

    let currentImageData = null;

    product.variants.some(variant => {
    console.log('Variant ID:', variant.id);
    console.log('Images Data:', imagesData);

    currentImageData = imagesData.find(item => item.FproductId.toString() === variant.id.toString());
    console.log('Found Image Data:', currentImageData);

    // Return true to stop the loop after finding the first match
    return currentImageData !== undefined;
});

   // Update the image source and CSS properties if data is found
   if (currentImageData) {
     // const img = document.getElementById("emb-Back-image");
     // img.src = currentImageData.Backimg;

     // Check if Backimg is empty and hide the div if it is
     const patchesWrapper = document.querySelector(".patches-customizations-btn-wrapper");
     const sizevariantscontaier = document.querySelector(".size_variants_section");
     if (!currentImageData.Backimg) {
       patchesWrapper.style.visibility = "hidden";
       // sizevariantscontaier.style.visibility = "hidden";
     } else {
       patchesWrapper.style.visibility = "visible";
       sizevariantscontaier.style.visibility = "visible";
     }

     // Update CSS properties of #centerBox
     const centerBox = document.getElementById("embBackcenterBox");
     centerBox.style.height = currentImageData.BHeight + '%';
     centerBox.style.width = currentImageData.BWidth + '%';
     centerBox.style.top = currentImageData.BTop + '%';
     centerBox.style.left = currentImageData.BLeft + '%';

      //arm emb area
        //right arm
        const brontRarmembcenterBox = document.getElementById("brontRarmembcenterBox");
        brontRarmembcenterBox.style.height = currentImageData.BRAHeight + '%';
        brontRarmembcenterBox.style.width = currentImageData.BRAWidth + '%';
        brontRarmembcenterBox.style.top = currentImageData.BRATop + '%';
        brontRarmembcenterBox.style.left = currentImageData.BRALeft + '%';
        const Rarmembarea = document.createElement('div');
        Rarmembarea.classList.add('back-Rarm-emb-font-type-area');
        brontRarmembcenterBox.appendChild(Rarmembarea);
        const FRarminputField = document.querySelector('.BRarminput');

        // Add an event listener for the input event to update the newDiv's content
        FRarminputField.addEventListener('input', function() {
        // Set the content of the dynamically created .emb-font-type-area div
        Rarmembarea.textContent = FRarminputField.value;
        });
        //left  arm
        const brontLarmembcenterBox = document.getElementById("brontLarmembcenterBox");
        brontLarmembcenterBox.style.height = currentImageData.BLAHeight + '%';
        brontLarmembcenterBox.style.width = currentImageData.BLAWidth + '%';
        brontLarmembcenterBox.style.top = currentImageData.BLATop + '%';
        brontLarmembcenterBox.style.left = currentImageData.BLALeft + '%';

        const Larmembarea = document.createElement('div');
        Larmembarea.classList.add('back-Larm-emb-font-type-area');
        brontLarmembcenterBox.appendChild(Larmembarea);
        const FLarminputField = document.querySelector('.BLarminput');

      // Add an event listener for the input event to update the newDiv's content
      FLarminputField.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      Larmembarea.textContent = FLarminputField.value;
     });
      // Create a new child div with the class .emb-font-type-area
        const newDiv = document.createElement('div');
        newDiv.classList.add('emb-back-type-area');

        // Optionally, you can set some styles or text for the new div
        // newDiv.textContent = 'abc'; // or any other text you want

        // Append the new div to the centerBox
        centerBox.appendChild(newDiv);
     showthreadcolors(threadcolors);
        const inputField = document.querySelector('.Bchestinput');

        // Add an event listener for the input event to update the newDiv's content
        inputField.addEventListener('input', function() {
        // Set the content of the dynamically created .emb-font-type-area div
        newDiv.textContent = inputField.value;
             newDiv.textContent = inputField.value;
      {% comment %} if (inputField.value.length <= 5) {
  newDiv.style.setProperty('font-size', '15px', 'important');
} 
      else {
  if (window.innerWidth < 769) {
    newDiv.style.setProperty('font-size', '15px', 'important');
  } else if (window.innerWidth >= 1024 && window.innerWidth <= 1300) {
    newDiv.style.setProperty('font-size', '15px', 'important');
  } else {
     newDiv.style.setProperty('font-size', '15px', 'important');
  }
} {% endcomment %}

     });

     const Bmonograminput = document.querySelector('.Bmonograminput');

      // Add an event listener for the input event to update the newDiv's content
      Bmonograminput.addEventListener('input', function() {
      // Set the content of the dynamically created .emb-font-type-area div
      newDiv.textContent = Bmonograminput.value;
     });
   }
        displayFonts(fontVariants);
}

     function showcolorVariants() {
    console.log('This is color variants', colorVariants);

    const product = {{ product | json }};

    // Clear any existing color variants
    const sidebarBtn = document.querySelector('.emb-color-variant-selector-sidebar-btn');
    sidebarBtn.innerHTML = '';

    let firstColorVariant; // Variable to store the first color variant div

    // Iterate over the product variants
    product.variants.forEach(variant => {
        // Check if the current variant matches any color variant
        colorVariants.forEach(colorVariant => {
            // Check if the product contains the tag "back-pack"
            const productTags = {{ product.tags | json }};
            if (productTags.includes("none-size-products")) {
              console.log('non size'); 
              if (colorVariant.id.toString() === variant.id.toString()){
                     const matchingVariants = product.variants.filter(variant => {
    return variant.title.toLowerCase().includes(colorVariant.colorname.toLowerCase());
});

console.log('matchingVariantsBack Pack',matchingVariants);
          let isAvailable = matchingVariants.length > 0 && matchingVariants[0].available;

if (isAvailable) {
    console.log("The variant is available.");
    console.log('back-pack');
   // Create a new div for each color variant
   const parentDiv = document.createElement('div');
   parentDiv.classList.add('parent-variant-wrapper');
   const newDiv = document.createElement('div');
   newDiv.style.backgroundColor = colorVariant.Variants;
   newDiv.classList.add('color-variant');
   newDiv.setAttribute('color-title', colorVariant.colorname);
   console.log(document.getElementById('Front-image'));
   console.log(colorVariant.productImg);
   // Set the images for the front and back
 

   // Add click event listener to each div
   newDiv.addEventListener('click', () => {
   // Remove the class from all color-variant divs
   document.querySelectorAll('.color-variant').forEach((div) => {
       div.classList.remove('selected-variant');
       
   });

   // Add the class to the clicked div
   newDiv.classList.add('selected-variant');
   const colorTitle = newDiv.getAttribute('color-title');
   console.log('colorTitle', colorTitle);

   // Update the content of the .color_selector_heading div
   const colorSelectorHeading = document.querySelector('.emb-color_selector_heading');
     console.log(colorSelectorHeading)
   if (colorSelectorHeading) {
     console.log('yes its existes colorSelectorHeading')
       colorSelectorHeading.textContent = colorTitle;
   }

   // Find the matching variant
   const matchingVariant = product.variants.find(variant =>
       variant.title.toLowerCase().includes(colorTitle.toLowerCase())
   );

   if (matchingVariant) {
       // Update the input value with the matching variant ID
       const hiddenInput = document.querySelector('input[name="emb-selective_variant_ID"]');
       if (hiddenInput) {
           hiddenInput.value = matchingVariant.id;
       }
   }

   // Set the src attribute of the image with id "Front-image" and "Back-image"
   document.getElementById('emb-Front-image').src = colorVariant.productImg;
   document.getElementById('emb-Back-image').src = colorVariant.backImg;
});


   // Append the new div to the div with class "variant-selector-sidebar-btn"
   parentDiv.appendChild(newDiv);
   sidebarBtn.appendChild(parentDiv);

   // Store the first color variant div
   if (!firstColorVariant) {
       firstColorVariant = newDiv;
   }
} else {
    console.log("The variant is not available.");
    // Perform actions if the condition is false
}
              }
            } 
            
            else {
              console.log('size product'); 
                                      // Assuming variants is an array of variant objects

 if (colorVariant.id.toString() === variant.id.toString()) {
                   const matchingVariants = product.variants.filter(variant => {
    return variant.title.toLowerCase().includes(colorVariant.colorname.toLowerCase());
});

console.log('matchingVariants',matchingVariants);
// Check if any of the matching variants are available
const isAnyVariantAvailable = matchingVariants.some(variant => variant.available);

if (isAnyVariantAvailable) {
    console.log('At least one variant is available.');
   
                          // Create a new div for each color variant
                    const parentDiv = document.createElement('div');
                    parentDiv.classList.add('parent-variant-wrapper');
                    const newDiv = document.createElement('div');
                    if (productTags.includes("gardient-patch-background")) {
                      console.log(newDiv,'gardient-patch-background');
    newDiv.style.backgroundImage = 'radial-gradient(circle, rgba(223, 221, 157, 1) 0%, rgba(238, 96, 183, 1) 35%, rgba(165, 134, 222, 1) 100%)';
} else {
    newDiv.style.backgroundColor = colorVariant.Variants;
}
                    newDiv.classList.add('color-variant');
                    newDiv.setAttribute('color-title', colorVariant.colorname);

                    // Set the images for the front and back
                    document.getElementById('emb-Front-image').src = colorVariant.productImg;
                    document.getElementById('emb-Back-image').src = colorVariant.backImg;

                    // Add click event listener to each div
                  // Add click event listener to each div
newDiv.addEventListener('click', () => {
    // Remove the class from all color-variant divs
    document.querySelectorAll('.color-variant').forEach((div) => {
        div.classList.remove('selected-variant');
    });

    // Remove the border class from all parent wrappers
    document.querySelectorAll('.parent-variant-wrapper').forEach((wrapper) => {
        wrapper.classList.remove('selected-variant-border');
    });

    // Add the class to the clicked div
    newDiv.classList.add('selected-variant');

    // Add border class to its parent
    const parentWrapper = newDiv.closest('.parent-variant-wrapper');
    if (parentWrapper) {
        parentWrapper.classList.add('selected-variant-border');
    }


    const colorTitle = newDiv.getAttribute('color-title');
    console.log('colorTitle', colorTitle);

    const colorSelectorHeading = document.querySelector('.emb-color_selector_heading');
    console.log(colorSelectorHeading);
    if (colorSelectorHeading) {
        console.log('yes its existes colorSelectorHeading');
        colorSelectorHeading.textContent = colorTitle;
    }

    const sizeSelectorHeading = document.querySelector('.color_selector_heading');
    console.log(sizeSelectorHeading);
    if (sizeSelectorHeading) {
        console.log('yes its existes sizeSelectorHeading');
        sizeSelectorHeading.textContent = '';
    }

    // Call createVariantDivs if not a "back-pack"
    createVariantDivs(colorTitle);

    // Set the src attribute of the image with id "Front-image" and "Back-image"
    document.getElementById('emb-Front-image').src = colorVariant.productImg;
    document.getElementById('emb-Back-image').src = colorVariant.backImg;
});


                    // Append the new div to the div with class "variant-selector-sidebar-btn"
                    parentDiv.appendChild(newDiv);
                    sidebarBtn.appendChild(parentDiv);

                    // Store the first color variant div
                    if (!firstColorVariant) {
                        firstColorVariant = newDiv;
                    }

} else {
    console.log('All variants are unavailable.');
    // Condition becomes false
}
                      }
                  
            }
        });
    });


    // Automatically move the first color variant to createVariantDivs
    if (firstColorVariant) {
        console.log('firstColorVariant');
        firstColorVariant.classList.add('selected-variant');
        const parentWrapper = firstColorVariant.closest('.parent-variant-wrapper');
if (parentWrapper) {
  parentWrapper.classList.add('selected-variant-border');
}
        // document.getElementById('Front-image').src = colorVariant.productImg;
        // document.getElementById('Back-image').src = colorVariant.backImg;
        const colorTitle = firstColorVariant.getAttribute('color-title');
        console.log('First color variant', colorTitle);
    const colorSelectorHeading = document.querySelector('.emb-color_selector_heading');
     console.log(colorSelectorHeading)
   if (colorSelectorHeading) {
     console.log('yes its existes colorSelectorHeading')
       colorSelectorHeading.textContent = colorTitle;
   }
        const productTags = {{ product.tags | json }};
        if (!productTags.includes("none-size-products")) {
            createVariantDivs(colorTitle);
        } 
        else {
          $('.size_variants_section').css('visibility', 'hidden');
            // If it's a back-pack, find the matching variant
            const matchingVariant = product.variants.find((variant) =>
                variant.title.toLowerCase().includes(colorTitle.toLowerCase())
            );

            if (matchingVariant) {
                // Update the input value with the matching variant ID
                const hiddenInput = document.querySelector('input[name="emb-selective_variant_ID"]');
                if (hiddenInput) {
                    hiddenInput.value = matchingVariant.id;
                }
            }
        }
        console.log('colorVariants:', colorVariants);
        console.log('colorTitle',colorTitle)

// Step 1: Find all color variants that match the title
const matchingColorVariants = colorVariants.filter(colorVariant => 
    colorVariant.colorname &&
    colorTitle &&
    colorVariant.colorname.toLowerCase() === colorTitle.toLowerCase()
);

console.log('matchingColorVariants', matchingColorVariants);

// Step 2: From the matching color variants, find the one where the IDs match
const firstColorVariantData = matchingColorVariants.find(colorVariant => 
    product.variants.some(variant =>
        variant.id.toString() === colorVariant.id.toString()
    )
);

console.log('firstColorVariantData', firstColorVariantData);

if (firstColorVariantData) {
    console.log('yes i am under ', firstColorVariantData.productImg);
    
    // Set the src attribute of the images with the found color variant data
    document.getElementById('emb-Front-image').src = firstColorVariantData.productImg;
    document.getElementById('emb-Back-image').src = firstColorVariantData.backImg;
}

    }
} 
       
function createVariantDivs(colorTitle) {
  const product2 = {{ product | json }};
  const variantsContainer = document.getElementById('emb-variants-containers');

  // Product options like ["Size","Color", ...]
  const optionNames = {{ product.options | json }};
  const colorIdx = optionNames.findIndex(n => /color/i.test(n));
  const sizeIdx  = optionNames.findIndex(n => /size/i.test(n));

  const getOpt = (v, idx) => (
    idx === 0 ? v.option1 :
    idx === 1 ? v.option2 :
    idx === 2 ? v.option3 : ''
  );

  const getVariantColor = v => (colorIdx >= 0 ? getOpt(v, colorIdx) : '');
  const getVariantSize  = v => (sizeIdx  >= 0 ? getOpt(v, sizeIdx)  : (v.option1 || ''));

  const norm = s => (s || '').trim().toLowerCase();

  // Reset
  variantsContainer.innerHTML = '';
  const addedSizes = new Set();
  let firstButton = null;

  product2.variants.forEach(v => {
    if (!v.available) return;
    if (norm(getVariantColor(v)) !== norm(colorTitle)) return;

    const sizeLabel = (getVariantSize(v) || '').trim();
    if (!sizeLabel || addedSizes.has(sizeLabel)) return;

    addedSizes.add(sizeLabel);

    const btn = document.createElement('div');
    btn.textContent = sizeLabel;
    btn.dataset.vId = v.id; // store variant id
    btn.className = 'select_size size_variants_circle size_variants';
    variantsContainer.appendChild(btn);

    if (!firstButton) firstButton = btn;

    // Click handler
    btn.addEventListener('click', () => {
      // Toggle active within this container only
      variantsContainer.querySelectorAll('.select_size').forEach(d => d.classList.remove('size_variants_active'));

      // UI bits (jQuery is fine if present)
      if (window.$) {
        $('.size_variants_errors').css('display', 'none');
        $('.small_selected_heading_size').css('visibility', 'visible');
      }

      btn.classList.add('size_variants_active');

      // Update heading
      const sizeHeading = document.querySelector('.emb-size_selector_heading');
      if (sizeHeading) sizeHeading.textContent = sizeLabel;

      // Hidden inputs
      const hiddenId = document.getElementById('emb-selective_variant_ID');
      if (hiddenId) hiddenId.value = btn.dataset.vId;

      const hiddenName = document.getElementById('selective_variant_name');
      if (hiddenName) hiddenName.value = sizeLabel;
    });
  });

  // ✅ Auto-select the first size variant (no reliance on .click())
  if (firstButton) {
    // Clear any active classes just in case
    variantsContainer.querySelectorAll('.select_size').forEach(d => d.classList.remove('size_variants_active'));

    firstButton.classList.add('size_variants_active');

    const sizeLabel = firstButton.textContent.trim();

    const hiddenId = document.getElementById('emb-selective_variant_ID');
    if (hiddenId) hiddenId.value = firstButton.dataset.vId;

    const hiddenName = document.getElementById('selective_variant_name');
    if (hiddenName) hiddenName.value = sizeLabel;

    const sizeHeading = document.querySelector('.emb-size_selector_heading');
    if (sizeHeading) sizeHeading.textContent = sizeLabel;

    // (Optional) If you also need any external listeners to fire:
    // firstButton.dispatchEvent(new Event('change', { bubbles: true }));
  }
}


  $('.size_variants').click(function() {
                // Remove 'size_variants_active' class from all elements with 'size_variants' class
                $('.size_variants').removeClass('size_variants_active');
                // Add 'size_variants_active' class to the clicked element
                $(this).addClass('size_variants_active');
                // Update hidden input value with the id of the clicked element
               $('#size_variants_data').val($(this).text());
            });
     $('#emb-small_variant').click(function() {
        console.log('change-text');
          $('.size_selector_heading').text('Small');
      });
      $('#emb-medium_variant').click(function() {
          $('.size_selector_heading').text('Medium');
      });
      $('#emb-large_variant').click(function() {
          $('.size_selector_heading').text('Large');
      });
      $('#emb-extra_large_variant').click(function() {
          $('.size_selector_heading').text('Extra Large');
      });
       
function displayFonts(fontVariants) {
    const allEmbFontsDiv = document.querySelector('.all_emb_fonts');
    allEmbFontsDiv.innerHTML = ''; // This will clear all existing content
    {% comment %} $('#Monogram_inputs').hide();
  $('#wordsletter_inputs').show(); {% endcomment %}
  const fontEmbDivs = [];
    fontVariants.forEach(font => {
        // Create the .font_emb div
        if (font.Category === 'WM' || font.Category === 'W') {   
         const fontDiv = document.createElement('div');
        fontDiv.className = 'font_emb';
        fontDiv.setAttribute('font_family', font.fontName);
        const fontTitle = font.fontTitle;
        // Create the img element
        const img = document.createElement('img');
        img.src = font.FeatureImagefont;
        img.alt = font.fontName;

        // Append the img to the .font_emb div
        fontDiv.appendChild(img);

        // Append the .font_emb div to the parent container
        parentDiv.appendChild(fontDiv);
           fontEmbDivs.push(fontDiv);
        fontDiv.addEventListener('click', function() {
            var fontFamily = fontDiv.getAttribute('font_family');
            console.log('font_emb_selected clicked');
            // Select the .emb-font-type-area element
            var embFontArea = document.querySelector('.emb-font-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
            embFontArea.className = 'emb-font-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            embFontArea.classList.add(fontFamily);


             var embBackArea = document.querySelector('.emb-back-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
            embBackArea.className = 'emb-back-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            embBackArea.classList.add(fontFamily);

          // Front arms embroidery area
             var embFontRarmArea = document.querySelector('.Rarm-emb-font-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
            embFontRarmArea.className = 'Rarm-emb-font-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            embFontRarmArea.classList.add(fontFamily);

            var embFontLarmArea = document.querySelector('.Larm-emb-font-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
            embFontLarmArea.className = 'Larm-emb-font-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            embFontLarmArea.classList.add(fontFamily);

           //Back area arms
            var BembFontRarmArea = document.querySelector('.back-Rarm-emb-font-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
             BembFontRarmArea.className = 'back-Rarm-emb-font-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            BembFontRarmArea.classList.add(fontFamily);

            var BembFontLarmArea = document.querySelector('.back-Larm-emb-font-type-area');
            
            // Remove all classes except the default .emb-font-type-area class
            BembFontLarmArea.className = 'back-Larm-emb-font-type-area';
            
            // Add the fontFamily as a class to the .emb-font-type-area div
            BembFontLarmArea.classList.add(fontFamily);
            document.querySelector('#selected_font_style').textContent = fontTitle;
            console.log('Font family added as class:', fontFamily);

            const embFontInput = document.querySelector('#selective_emb_font');
    if (embFontInput) {
        embFontInput.value = fontFamily;
        console.log('Hidden input updated with font family:', fontFamily);
    }
        });
       }
     

      
    });

   // Automatically select and apply the font settings to the first .font_emb div
  if (fontEmbDivs.length > 0) {
    const firstFontEmbDiv = fontEmbDivs[0];
    firstFontEmbDiv.classList.add('font_emb_selected');
    const fontFamily = firstFontEmbDiv.getAttribute('font_family');
    applyFontFamily(fontFamily);
  }

 function applyFontFamily(fontFamily) {
    // Select and update the .emb-font-type-area element
    const embBackArea = document.querySelector('.emb-back-type-area');
    console.log('embBackArea:', embBackArea);
    if (embBackArea) {
        embBackArea.className = 'emb-back-type-area';
        embBackArea.classList.add(fontFamily);
    } 
    
    const embFontArea = document.querySelector('.emb-font-type-area');
    console.log('embFontArea:', embFontArea);
    if (embFontArea) {
        embFontArea.className = 'emb-font-type-area';
        embFontArea.classList.add(fontFamily);
    }

    // Front arms embroidery area
    const embFontRarmArea = document.querySelector('.Rarm-emb-font-type-area');
    console.log('embFontRarmArea:', embFontRarmArea);
    if (embFontRarmArea) {
        embFontRarmArea.className = 'Rarm-emb-font-type-area';
        embFontRarmArea.classList.add(fontFamily);
    }

    const embFontLarmArea = document.querySelector('.Larm-emb-font-type-area');
    console.log('embFontLarmArea:', embFontLarmArea);
    if (embFontLarmArea) {
        embFontLarmArea.className = 'Larm-emb-font-type-area';
        embFontLarmArea.classList.add(fontFamily);
    }

    // Back area arms
    const BembFontRarmArea = document.querySelector('.back-Rarm-emb-font-type-area');
    console.log('BembFontRarmArea:', BembFontRarmArea);
    if (BembFontRarmArea) {
        BembFontRarmArea.className = 'back-Rarm-emb-font-type-area';
        BembFontRarmArea.classList.add(fontFamily);
    }

    const BembFontLarmArea = document.querySelector('.back-Larm-emb-font-type-area');
    console.log('BembFontLarmArea:', BembFontLarmArea);
    if (BembFontLarmArea) {
        BembFontLarmArea.className = 'back-Larm-emb-font-type-area';
        BembFontLarmArea.classList.add(fontFamily);
    }

    // Update the displayed font style
    document.querySelector('#selected_font_style').textContent = fontFamily;
    console.log('Font family added as class:', fontFamily);

    // Update the value of the hidden input field for the font
    const embFontInput = document.querySelector('#selective_emb_font');
    if (embFontInput) {
        embFontInput.value = fontFamily;
        console.log('Hidden input updated with font family:', fontFamily);
    }
}


}
function displayMonogramsFonts(fontVariants) {
  const allEmbFontsDiv = document.querySelector('.all_emb_monogram_fonts');
  allEmbFontsDiv.innerHTML = ''; // This will clear all existing content

  // Show and hide the appropriate inputs
  $('#Monogram_inputs').show();
  $('#wordsletter_inputs').hide();

  // Array to store all .font_emb divs
  const fontEmbDivs = [];

  fontVariants.forEach(font => {
    if (font.Category === 'WM' || font.Category === 'M') {   
      const fontDiv = document.createElement('div');
      fontDiv.className = 'font_emb';
      fontDiv.setAttribute('font_family', font.fontName);

      // Create the img element
      const img = document.createElement('img');
      img.src = font.FeatureImagefont;
      img.alt = font.fontName;

      // Append the img to the .font_emb div
      fontDiv.appendChild(img);

      // Append the .font_emb div to the parent container
      allEmbFontsDiv.appendChild(fontDiv);

      // Add fontDiv to the array for later use
      fontEmbDivs.push(fontDiv);

      fontDiv.addEventListener('click', function() {
        console.log('Font div clicked');
        
        // Remove .font_emb_selected from all divs
        fontEmbDivs.forEach(div => div.classList.remove('font_emb_selected'));

        // Add .font_emb_selected class to the clicked div
        fontDiv.classList.add('font_emb_selected');

        // Get the fontFamily from the clicked .font_emb div
        const fontFamily = fontDiv.getAttribute('font_family');

        // Apply the fontFamily to the relevant elements
        applyFontFamily(fontFamily);
      });
    }
  });

  // Automatically select and apply the font settings to the first .font_emb div
  if (fontEmbDivs.length > 0) {
    const firstFontEmbDiv = fontEmbDivs[0];
    firstFontEmbDiv.classList.add('font_emb_selected');
    const fontFamily = firstFontEmbDiv.getAttribute('font_family');
    applyFontFamily(fontFamily);
  }

  function applyFontFamily(fontFamily) {
    // Select and update the .emb-font-type-area element
    const embFontArea = document.querySelector('.emb-font-type-area');
    embFontArea.className = 'emb-font-type-area';
    embFontArea.classList.add(fontFamily);

      const embBackArea = document.querySelector('.emb-back-type-area');
    embBackArea.className = 'emb-back-type-area';
    embBackArea.classList.add(fontFamily);
    
    // Front arms embroidery area
    const embFontRarmArea = document.querySelector('.Rarm-emb-font-type-area');
    embFontRarmArea.className = 'Rarm-emb-font-type-area';
    embFontRarmArea.classList.add(fontFamily);

    const embFontLarmArea = document.querySelector('.Larm-emb-font-type-area');
    embFontLarmArea.className = 'Larm-emb-font-type-area';
    embFontLarmArea.classList.add(fontFamily);

    // Back area arms
    const BembFontRarmArea = document.querySelector('.back-Rarm-emb-font-type-area');
    BembFontRarmArea.className = 'back-Rarm-emb-font-type-area';
    BembFontRarmArea.classList.add(fontFamily);

    const BembFontLarmArea = document.querySelector('.back-Larm-emb-font-type-area');
    BembFontLarmArea.className = 'back-Larm-emb-font-type-area';
    BembFontLarmArea.classList.add(fontFamily);
 document.querySelector('#selected_font_style').textContent = fontFamily;
    console.log('Font family added as class:', fontFamily);
      const embFontInput = document.querySelector('#selective_emb_font');
    if (embFontInput) {
        embFontInput.value = fontFamily;
        console.log('Hidden input updated with font family:', fontFamily);
    }
  }
  
}


//        function displayColors(threadcolors) {
//          console.log('threadcolors under function',threadcolors)
//     threadcolors.forEach(color => {
//         // Create the .emb_thread_colors div
//         const colorDiv = document.createElement('div');
//         colorDiv.className = 'emb_thread_colors';
//         colorDiv.style.backgroundColor = color.ColorName;
//         colorDiv.setAttribute('data-color-title', color.ColorTitle);

//         // Append the .emb_thread_colors div to the parent container
//         parentDivthreads.appendChild(colorDiv);
//     });
// }
     })

     .catch(error => {
       console.error('Fetch error:', error);
     });
</script>
<script>
    $(document).ready(function() {
       function showBackOrFront(event) {
        if (event.target.id === 'embshowFrontBtn') {
          $('#emb-Front-Area').removeClass('image-hidden').css('visibility', 'visible');
          $('#embshowBackBtnn').removeClass('patches-customization-btn-active');
          $('#embshowFrontBtn').addClass('patches-customization-btn-active');
         $('#emb-Back-area').css('visibility', 'hidden');
          showfrontembinputs();
          showmonogramfrontembinputs();
               $('#back_inputs_btn').removeClass('front_inputs_btn_active');
               $('#front_inputs_btn').addClass('front_inputs_btn_active');
                  $('#monogram_back_inputs_btn').removeClass('front_inputs_btn_active');
               $('#monogram_front_inputs_btn').addClass('front_inputs_btn_active');
        } else if (event.target.id === 'embshowBackBtnn') {
          showbackembinputs();
          showmonogrambackembinputs();
            var backArea = document.getElementById('emb-Back-area');
             backArea.style.top = '0px';
          $('#front_inputs_btn').removeClass('front_inputs_btn_active');
           $('#back_inputs_btn').addClass('front_inputs_btn_active');
                    $('#monogram_front_inputs_btn').removeClass('front_inputs_btn_active');
           $('#monogram_back_inputs_btn').addClass('front_inputs_btn_active');
          // Hide front image and show back image
          $('#embshowFrontBtn').removeClass('patches-customization-btn-active');
          $('#embshowBackBtnn').addClass('patches-customization-btn-active');
          $('#emb-Front-Area').addClass('image-hidden').css('visibility', 'hidden');
          $('#emb-Back-area').removeClass('image-hidden').css('visibility', 'visible');
          const backPatches = document.querySelectorAll('.BackcenterBox > .patches-containerr > .patch-action');

  backPatches.forEach(patch => {
    patch.style.display = 'block';
  });

        }
      }
      $('#embshowFrontBtn').click(showBackOrFront);
      $('#embshowBackBtnn').click(showBackOrFront);
      $('#emb-Front-Area').removeClass('image-hidden').css('visibility', 'visible');
       function showBackOrFrontemb(event) {
        if (event.target.id === 'front_inputs_btn') {
          $('#emb-Front-Area').removeClass('image-hidden').css('visibility', 'visible');
          $('#embshowBackBtnn').removeClass('patches-customization-btn-active');
          $('#embshowFrontBtn').addClass('patches-customization-btn-active');
         $('#emb-Back-area').css('visibility', 'hidden');
          showfrontembinputs();
          showmonogramfrontembinputs();
      
        } else if (event.target.id === 'back_inputs_btn') {
          showbackembinputs();
          showmonogrambackembinputs();
           
            var backArea = document.getElementById('emb-Back-area');
             backArea.style.top = '0px';
          // Hide front image and show back image
          $('#embshowFrontBtn').removeClass('patches-customization-btn-active');
          $('#embshowBackBtnn').addClass('patches-customization-btn-active');
          $('#emb-Front-Area').addClass('image-hidden').css('visibility', 'hidden');
          $('#emb-Back-area').removeClass('image-hidden').css('visibility', 'visible');
          const backPatches = document.querySelectorAll('.BackcenterBox > .patches-containerr > .patch-action');

  backPatches.forEach(patch => {
    patch.style.display = 'block';
  });

        }
      }
        $('#front_inputs_btn').click(showBackOrFrontemb);
      $('#back_inputs_btn').click(showBackOrFrontemb);
           function showBackOrFrontembmono(event) {
        if (event.target.id === 'monogram_front_inputs_btn') {
          $('#emb-Front-Area').removeClass('image-hidden').css('visibility', 'visible');
          $('#embshowBackBtnn').removeClass('patches-customization-btn-active');
          $('#embshowFrontBtn').addClass('patches-customization-btn-active');
         $('#emb-Back-area').css('visibility', 'hidden');
          showfrontembinputs();
          showmonogramfrontembinputs();
            
        } else if (event.target.id === 'monogram_back_inputs_btn') {
          showbackembinputs();
          showmonogrambackembinputs();

            var backArea = document.getElementById('emb-Back-area');
             backArea.style.top = '0px';
          
          // Hide front image and show back image
          $('#embshowFrontBtn').removeClass('patches-customization-btn-active');
          $('#embshowBackBtnn').addClass('patches-customization-btn-active');
          $('#emb-Front-Area').addClass('image-hidden').css('visibility', 'hidden');
          $('#emb-Back-area').removeClass('image-hidden').css('visibility', 'visible');
          const backPatches = document.querySelectorAll('.BackcenterBox > .patches-containerr > .patch-action');

  backPatches.forEach(patch => {
    patch.style.display = 'block';
  });

        }
      }
      $('#monogram_front_inputs_btn').click(showBackOrFrontembmono);
      $('#monogram_back_inputs_btn').click(showBackOrFrontembmono);
    });
</script>
<script>
    $('.emb-close-variant-selector-editor').click(function() {
      console.log('close-variant-selector-editor clicked')
      // Remove the class from any element that has it
      $('.all-sidebar-cross-alert').addClass('all-sidebar-cross-alert-visble');

      $('.patches-customization-container-overly').css('display', 'block');
  });
    $('.emb-all-sidebar-cross-neverMind-button').click(function() {
      console.log('close-variant-selector-editor clicked')
      // Remove the class from any element that has it
      $('.all-sidebar-cross-alert').removeClass('all-sidebar-cross-alert-visble');

      $('.patches-customization-container-overly').css('display', 'none');
  });
    $('.crosssvg-wrapper').click(function() {
      console.log('close-variant-selector-editor clicked')
      // Remove the class from any element that has it
      $('.all-sidebar-cross-alert').removeClass('all-sidebar-cross-alert-visble');

      $('.patches-customization-container-overly').css('display', 'none');
  });
  $('.emb-all-sidebar-cross-exit-button').click(function() {
       location.reload();
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const fontContainer = document.getElementById('all_emb_fonts');

      // Add event listener to the parent container
      fontContainer.addEventListener('click', function(event) {
          let target = event.target;

          // Traverse up the DOM to find the .font_emb parent
          while (target && !target.classList.contains('font_emb')) {
              target = target.parentElement;
          }

       if (target && target.classList.contains('font_emb')) {
    console.log("Font div clicked");
    
    // Remove 'font_emb_selected' from all elements with class 'font_emb'
    $('.font_emb').removeClass('font_emb_selected');
    
    // Toggle 'font_emb_selected' class on the clicked element
    $(target).toggleClass('font_emb_selected');
    
    // Get the font family from the clicked element
    const fontFamily = target.getAttribute('font_family');
    console.log(fontFamily);
    
    // Change the font family of the .emb-back-type-area element
    const embBackTypeArea = document.querySelector('.emb-back-type-area');
    console.log(embBackTypeArea);
    // embBackTypeArea.style.fontFamily = fontFamily;
}

      });
  });
</script>
<script>
  showfrontembinputs(); // Call this function immediately when the script runs

  $('#front_inputs_btn').on('click', function() {
        $('#front_inputs_btn, #back_inputs_btn').removeClass('front_inputs_btn_active');
    
    // Add the active class to the clicked button
    $(this).addClass('front_inputs_btn_active');
    // Call the showfrontembinputs function on button click
    showfrontembinputs();
  });
  $('#back_inputs_btn').on('click', function() {
   $('#front_inputs_btn, #back_inputs_btn').removeClass('front_inputs_btn_active');
 // Add the active class to the clicked button
    $(this).addClass('front_inputs_btn_active');
    // Call the showfrontembinputs function on button click
    showbackembinputs();
  });
$('#monogram_front_inputs_btn').on('click', function() {
  $('#monogram_back_inputs_btn, #monogram_front_inputs_btn').removeClass('front_inputs_btn_active');
    
    // Add the active class to the clicked button
    $(this).addClass('front_inputs_btn_active');

    // Call the showmonogramfrontembinputs function on button click
    showmonogramfrontembinputs();
});
$(document).ready(function() {
    // Add the class .front_inputs_btn_active to both divs when the page loads
    $('#front_inputs_btn, #monogram_front_inputs_btn').addClass('front_inputs_btn_active');
});

$('#monogram_back_inputs_btn').on('click', function() {
  $('#monogram_back_inputs_btn, #monogram_front_inputs_btn').removeClass('front_inputs_btn_active');
    
    // Add the active class to the clicked button
    $(this).addClass('front_inputs_btn_active');
   
    // Call the showmonogrambackembinputs function on button click
    showmonogrambackembinputs();
});


  // Define the showfrontembinputs function correctly
  function showfrontembinputs() {
  // Show the #front_inputs div and hide the #back_inputs div
    $('#front_inputs').show();
    $('#back_inputs').hide();
  }
  function showbackembinputs() {
  // Show the #front_inputs div and hide the #back_inputs div
    $('#front_inputs').hide();
    $('#back_inputs').show();
  }
function showmonogramfrontembinputs() {
    // Show the #front_monogram_input div and hide the #back_monogram_input div
    $('.front_monogram_input').show();
    $('.back_monogram_input').hide();
}

function showmonogrambackembinputs() {
    // Show the #back_monogram_input div and hide the #front_monogram_input div
    $('.front_monogram_input').hide();
    $('.back_monogram_input').show();
}
</script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const addBtn = document.querySelector('.emb_cart_btn');
  const customizeBtn = document.querySelector('#emb-patches-customization-form-btn');
  const loader = document.querySelector('#emb-loader-cart');
  const errorWrapper = document.querySelector('.emb-texterror-wrapper');
  const STITCHING_VARIANT_ID = 42085140430950;

  /* ===============================
     Embroidery Add to Cart Handler
  =============================== */
  addBtn.addEventListener('click', async () => {
    const Fchest = document.getElementsByName('Fchestinput')[0];
    const FRarm = document.getElementById('Bchestinput');
    const Fmono = document.getElementsByName('Fmonograminput')[0];
    const Bmono = document.getElementsByName('Bmonograminput')[0];

    const allEmpty = [Fchest, FRarm, Fmono, Bmono].every(i => i?.value.trim() === '');
    if (allEmpty) {
      errorWrapper.style.display = 'block';
      return;
    }

    toggleLoading(true);

    try {
      // ✅ Step 1: Create image (front + back)
      const { blob } = await composeEmbroideryFrontBackAndExport({
        background: '#ffffff',
        jpegQuality: 0.9,
        maxWidth: 1200
      });

      // ✅ Step 2: Upload to S3
      const s3Url = await uploadBlobToS3(blob);
      document.querySelector('input[name="customized_image_url_front"]').value = s3Url;
      console.log('[Embroidery] Uploaded:', s3Url);

      // ✅ Step 3: Add embroidery + stitching fee to cart
      await addEmbroideryToCart(s3Url);

      console.log('[Embroidery] Added to cart successfully.');
    } catch (err) {
      console.error('[Embroidery] Error:', err);
      showOutOfStockError('Something went wrong. Please try again.');
    } finally {
      toggleLoading(false);
    }
  });

  /* ===============================
     UI Helpers
  =============================== */
  function toggleLoading(state) {
    loader.style.display = state ? 'block' : 'none';
    addBtn.style.display = state ? 'none' : 'block';
    customizeBtn.style.pointerEvents = state ? 'none' : 'auto';
    customizeBtn.style.opacity = state ? '0.5' : '1';
    customizeBtn.style.backgroundColor = state ? '#d6d6d6' : '';

    if (state) {
      customizeBtn.style.padding = '12px 71px';
      customizeBtn.style.borderRadius = '0 100px 100px 0';
    } else {
      customizeBtn.style.padding = '';
      customizeBtn.style.borderRadius = '';
    }
  }

  function showOutOfStockError(msg) {
    const outDiv = document.getElementById('Out-of-stock-error');
    if (!outDiv) return;
    outDiv.style.display = 'block';
    outDiv.style.visibility = 'visible';
    outDiv.textContent = msg;
    setTimeout(() => {
      outDiv.style.display = 'none';
      outDiv.style.visibility = 'hidden';
    }, 5000);
  }

  /* ===============================
     Upload to S3
  =============================== */
  async function uploadBlobToS3(blob) {
    const fd = new FormData();
    fd.append('image', blob, 'embroidery.jpg');
    const res = await fetch('https://6ch1pxqng1.execute-api.ap-south-1.amazonaws.com/check', {
      method: 'POST',
      body: fd
    });
    const json = await res.json();
    if (!json.fileUrl) throw new Error('No fileUrl from S3');
    return json.fileUrl;
  }

  /* ===============================
     Add to Cart
  =============================== */
  async function addEmbroideryToCart(imageUrl) {
    const cart = await fetch('/cart.js').then(r => r.json());
    const stitchingExists = cart.items.some(i => i.variant_id === STITCHING_VARIANT_ID);

    const variantID = document.querySelector('input[name="emb-selective_variant_ID"]').value;
    const font = document.querySelector('input[name="selective_emb_font"]').value;
    const color = document.querySelector('input[name="selective_font_color"]').value;

    const embroideryItem = {
      id: Number(variantID),
      quantity: 1,
      properties: {
        _embroideryProduct: 'Embroidery Product',
        _customized_image_url_front: imageUrl,
        "Font": font,
        "Font Color": color,
        _Timestamp: Date.now(),
        _stitchingVariantID: STITCHING_VARIANT_ID
      }
    };

    const items = stitchingExists
      ? [embroideryItem]
      : [embroideryItem, { id: STITCHING_VARIANT_ID, quantity: 1, properties: { _Timestamp: Date.now() } }];

    const res = await fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ items })
    });

    const json = await res.json();
    if (json.status === 422) showOutOfStockError(json.message || 'Out of stock.');
  }

  /* ===============================
     EMBROIDERY IMAGE COMPOSITOR
  =============================== */

  function loadImageCORS(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = "anonymous";
      img.decoding = "async";
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = src;
    });
  }

  async function composeEmbroideryArea({
    areaEl,
    baseImgSelector,
    background = "#ffffff",
    jpegQuality = 0.9
  }) {
    if (!areaEl) throw new Error("composeEmbroideryArea: areaEl missing");
    const baseEl = areaEl.querySelector(baseImgSelector);
    if (!baseEl) throw new Error(`Base image not found: ${baseImgSelector}`);

    const baseSrc = baseEl.currentSrc || baseEl.src;
    const baseImg = await loadImageCORS(baseSrc);

    const baseRect = baseEl.getBoundingClientRect();
    const renderW = baseRect.width || baseImg.naturalWidth;
    const renderH = baseRect.height || baseImg.naturalHeight;

    const scaleX = baseImg.naturalWidth / renderW;
    const scaleY = baseImg.naturalHeight / renderH;

    const canvas = document.createElement("canvas");
    canvas.width = baseImg.naturalWidth;
    canvas.height = baseImg.naturalHeight;
    const ctx = canvas.getContext("2d", { alpha: false });
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = "high";

    ctx.fillStyle = background;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(baseImg, 0, 0, canvas.width, canvas.height);

    // Draw embroidery text
    const textAreas = areaEl.querySelectorAll(".emb-font-type-area, .emb-back-type-area");
    textAreas.forEach(embEl => {
      const text = embEl.textContent.trim();
      if (!text) return;

      const rect = embEl.getBoundingClientRect();
      const style = getComputedStyle(embEl);

      const fontSize = parseFloat(style.fontSize) * scaleY;
      const fontFamily = style.fontFamily;
      const fontWeight = style.fontWeight;
      const color = style.color;
      const align = style.textAlign || "center";

      const x = (rect.left - baseRect.left) * scaleX;
      const y = (rect.top - baseRect.top + rect.height * 0.8) * scaleY;

      ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
      ctx.fillStyle = color;
      ctx.textBaseline = "alphabetic";
      ctx.textAlign = align;

      const drawX =
        align === "center"
          ? x + (rect.width * scaleX) / 2
          : align === "right"
            ? x + rect.width * scaleX
            : x;

      ctx.fillText(text, drawX, y);
    });

    const blob = await new Promise(res => canvas.toBlob(b => res(b), "image/jpeg", jpegQuality));
    const objectURL = URL.createObjectURL(blob);
    console.log(`[EMBROIDERY:${areaEl.id}]`, objectURL);
    return { canvas, blob, objectURL };
  }

  async function composeEmbroideryFrontBackAndExport({
    background = "#ffffff",
    jpegQuality = 0.9,
    maxWidth = 1200
  } = {}) {
    const frontArea = document.getElementById("emb-Front-Area");
    const backArea = document.getElementById("emb-Back-area");
    if (!frontArea) throw new Error("Front embroidery area not found");

    const frontOut = await composeEmbroideryArea({
      areaEl: frontArea,
      baseImgSelector: "#emb-Front-image",
      background,
      jpegQuality
    });

    let backOut = null;
    if (backArea && backArea.querySelector("#emb-Back-image")) {
      try {
        backOut = await composeEmbroideryArea({
          areaEl: backArea,
          baseImgSelector: "#emb-Back-image",
          background,
          jpegQuality
        });
      } catch (e) {
        console.warn("Back embroidery skipped:", e);
      }
    }

    if (!backOut) return frontOut;

    const combo = document.createElement("canvas");
    combo.width = Math.max(frontOut.canvas.width, backOut.canvas.width);
    combo.height = frontOut.canvas.height + backOut.canvas.height;
    const ctx = combo.getContext("2d", { alpha: false });

    ctx.fillStyle = background;
    ctx.fillRect(0, 0, combo.width, combo.height);
    ctx.drawImage(frontOut.canvas, 0, 0);
    ctx.drawImage(backOut.canvas, 0, frontOut.canvas.height);

    let target = combo;
    if (maxWidth && combo.width > maxWidth) {
      const scale = maxWidth / combo.width;
      const down = document.createElement("canvas");
      down.width = Math.round(combo.width * scale);
      down.height = Math.round(combo.height * scale);
      const dctx = down.getContext("2d", { alpha: false });
      dctx.drawImage(combo, 0, 0, down.width, down.height);
      target = down;
    }

    const blob = await new Promise(res => target.toBlob(b => res(b), "image/jpeg", jpegQuality));
    const objectURL = URL.createObjectURL(blob);
    console.log("[EMBROIDERY:FRONT+BACK]", objectURL);
    return { canvas: target, blob, objectURL };
  }
});
</script>
<script>
function getResponsiveMaxSize() {
  const embText = document.querySelector('.emb-font-type-area');
  const textLength = embText.textContent.length;

  if (textLength >= 7) {
    return 15;
  } else {
    return 20;
  }
}

function updateFontSize(newSize) {
  const maxSize = getResponsiveMaxSize();
  const embText = document.querySelector('.emb-font-type-area');

  // Clamp newSize within range
  if (newSize < 1) newSize = 1;
  if (newSize > maxSize) newSize = maxSize;

  embText.style.fontSize = newSize + 'px';
  fontSizeInput.value = newSize;
}

// Initialize
const fontSizeInput = document.getElementById('fontSizeInput');
const increaseFont = document.getElementById('increaseFont');
const decreaseFont = document.getElementById('decreaseFont');

// Increase font
increaseFont.addEventListener('click', () => {
  let currentSize = parseInt(fontSizeInput.value);
  updateFontSize(currentSize + 1);
});

// Decrease font
decreaseFont.addEventListener('click', () => {
  let currentSize = parseInt(fontSizeInput.value);
  updateFontSize(currentSize - 1);
});

// Manual input
fontSizeInput.addEventListener('input', () => {
  let newSize = parseInt(fontSizeInput.value);
  if (!isNaN(newSize)) {
    updateFontSize(newSize);
  }
});
</script>

<script>
 // Default font size
// Function to update font size
function getResponsiveBackMaxSize() {
  const embText = document.querySelector('.emb-back-type-area');
  const textLength = embText.textContent.length;

  if (textLength >= 7) {
    return 25;
  } else {
    return 35;
  }
}
function updateFontBackSize(newSize) {
  const maxSize = getResponsiveBackMaxSize();
  const embText = document.querySelector('.emb-back-type-area');
  
  // Clamp newSize within range
  if (newSize < 1) newSize = 1;
  if (newSize > maxSize) newSize = maxSize;

  embText.style.fontSize = newSize + 'px';
  fontSizeBackInput.value = newSize;
}
// Initialize
const fontSizeBackInput = document.getElementById('fontSizeBackInput');
const increaseBackFont = document.getElementById('increaseBackFont');
const decreaseBackFont = document.getElementById('decreaseBackFont');

// Increase font
increaseBackFont.addEventListener('click', () => {
  let currentSize = parseInt(fontSizeBackInput.value);
  updateFontBackSize(currentSize + 1);
});

// Decrease font
decreaseBackFont.addEventListener('click', () => {
  let currentSize = parseInt(fontSizeBackInput.value);
  if (currentSize > 1) {
    updateFontBackSize(currentSize - 1);
  }
});

// Manual input
fontSizeBackInput.addEventListener('input', () => {
  let newSize = parseInt(fontSizeBackInput.value);
  if (!isNaN(newSize) && newSize > 0) {
    updateFontBackSize(newSize);
  }
});


</script>
<script>
document.querySelector('.Fchestinput').addEventListener('input', function () {
    const charCount = this.value.length;
    const embText = document.querySelector('.emb-font-type-area');
    const fontSizeInput = document.getElementById('fontSizeInput');

    if (charCount > 7) {
        let currentFontSize = parseInt(window.getComputedStyle(embText).fontSize);
        if (currentFontSize > 15) {
            embText.style.fontSize = '15px';
            fontSizeInput.value = 15;
        }
    }
});
</script>
<script>
document.querySelector('.Bchestinput').addEventListener('input', function () {
    const charCount = this.value.length;
    const embText = document.querySelector('.emb-back-type-area');
    const fontSizeInput = document.getElementById('fontSizeBackInput');

    if (charCount > 7) {
        let currentFontSize = parseInt(window.getComputedStyle(embText).fontSize);
        if (currentFontSize > 25) {
            embText.style.fontSize = '25px';
            fontSizeInput.value = 25;
        }
    }
});
</script>
<script>
 $('#Summar-icon-emb-wrap-continue').on('click', function() {
  $('.embroidery-summary-wrapper').toggleClass('embroidery-summary-wrapper-open');
  $('.complete-overly-wrapper').toggleClass('complete-overly-wrapper-active');
});
 $('#Summar-icon-emb-wrap-add-to-bag').on('click', function() {
  $('.embroidery-summary-wrapper-add-to-bag').toggleClass('embroidery-summary-wrapper-add-to-bag-open');
 $('.complete-overly-wrapper').toggleClass('complete-overly-wrapper-active');
});
 $('.summary-cross-btn-contiue-summary').on('click', function() {
  $('.embroidery-summary-wrapper').toggleClass('embroidery-summary-wrapper-open');
  $('.complete-overly-wrapper').toggleClass('complete-overly-wrapper-active');
});
 $('.summary-cross-btn-add-to-bag').on('click', function() {
  $('.embroidery-summary-wrapper-add-to-bag').toggleClass('embroidery-summary-wrapper-add-to-bag-open');
 $('.complete-overly-wrapper').toggleClass('complete-overly-wrapper-active');
});
</script>